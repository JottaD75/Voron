#####################################################################
#	Macros
#####################################################################

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    STATUS_HOMING
    M117 Homing...
    G28                            ; home all axes
    G90                            ; absolute positioning  
    ; heat tool after bed to minimize oozing
    # Start bed heating and continue
    STATUS_HEATING
    M117 Heating...
    {% if printer.heater_bed.temperature <= (params.BED|float *0.9) %}
        M190 S{params.BED|float*0.9} # wait till 0.85 of bed temp is reached, then continue  
    {% endif %}
    M104 S{ params.EXTRUDER } ; set extruder temp   
    M190 S{ params.BED } ; wait for bed temp ; wait for bed temp
    M109 S{ params.EXTRUDER } ; wait for extruder temp
    PURGE_LINE
    M117
    STATUS_PRINTING

[gcode_macro PURGE_LINE]
# A purge line on the left of the bed to prime the extruder
gcode:
    STATUS_HOMING
    G90 
    G92 E0 ; zero/reset extruder
    G1 X2.2 Y20 Z0.3 F10000 ; move to start position
    G1 E+1.6 F150 ; extrude to put the pressure (-20 from purge macro)
    G92 E0
    G1 X2.2 Y100 Z0.25 F1500 E10 ; extrude the first line
    G1 X2.5 Y100 Z0.3 F15000 ; move to side a little
    G1 X2.5 Y20 Z0.25 F1500.0 E20 ; extrude the second line
    G92 E0 ; zero/reset extruder
    G1 Z2.0 E-0.1 F1500 ; move nozzle up and retract tiny bit
    G92 E0
   
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-4.0 F3600                 ; retract filament
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X60 Y{max_y} F3600          ; park nozzle at rear
#    RESPOND MSG="Done printing file."
#    {% if filament_type == "ABS" or filament_type == "ASA" %}
#    FILTER_CHAMBER TEMP=45
#    {% else %}
#    SET_FAN_SPEED FAN=exhaust_fan SPEED=0
#    status_ready
#    {% endif %}
#    RESPOND MSG="All done, GG."

		
[gcode_macro LOAD_FILAMENT]
gcode:
   G90
   G1 X60 Y60 Z50 F18000          ; move to start position
   M83                            ; set extruder to relative
   G1 E20 F300                    ; load
   G1 E10 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-40 F1800                  ; retract some, but not too much or it will jam
   M82                            ; set extruder to absolute

[gcode_macro Filament_Change]
variable_extr_temp: 0
gcode:
 PAUSE
 G91
 G1 E-.8 F2700
 G1 Z{Z}
 G90
 G1 X{X} Y{Y} F3000

[gcode_macro LEVEL_BED]
gcode:
    G28
    BED_SCREWS_ADJUST

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{E} F2100
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F6000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    G91
    G1 E{E} F2100
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    G91 
    G1 Z5 
    G90
    G92 E0
    G1 X118 Y118 E-3
    G92 E0
    M84 XYE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

[gcode_macro TEXTURED_BED]
gcode:
  SET_GCODE_OFFSET Z=-0.10

[gcode_macro PEI_BED]
gcode:
  SET_GCODE_OFFSET Z=0.10

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(20)|int %}
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	# Large pattern
		# Max positions, inset by BOUND
		{% set x_min = printer.toolhead.axis_minimum.x + bound %}
		{% set x_max = printer.toolhead.axis_maximum.x - bound %}
		{% set y_min = printer.toolhead.axis_minimum.y + bound %}
		{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	# Small pattern at center
		# Find X/Y center point
		{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
		{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
		
		# Set small pattern box around center point
		{% set x_center_min = x_center - (smallpatternsize/2) %}
		{% set x_center_max = x_center + (smallpatternsize/2) %}
		{% set y_center_min = y_center - (smallpatternsize/2) %}
		{% set y_center_max = y_center + (smallpatternsize/2) %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Output parameters to g-code terminal
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }

	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30*60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

	{% for i in range(iterations) %}
		# Large pattern
			# Diagonals
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			
			# Box
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
		
		# Small pattern
			# Small diagonals 
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			
			# Small box
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home and get position again for comparison:
		G28
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30*60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED

#[gcode_macro FILTER_CHAMBER]
#gcode:
#    {% set TEMP = params.TEMP|default(50)|float %} #bed temp (C)
#    status_busy
#    M117 Filtering chamber
#    RESPOND MSG="Filtering chamber."
#    SET_PIN PIN=nevermore VALUE=1
#    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.25
#    TEMPERATURE_WAIT SENSOR=heater_bed MAXIMUM={TEMP}
#    SET_PIN PIN=nevermore VALUE=0
#    SET_FAN_SPEED FAN=exhaust_fan SPEED=0
#    M117 Filtering DONE
#    RESPOND MSG="Filtering done."
#    status_ready